swagger: '2.0'

info:
  version: "3.0"
  title: Movie Notifier
  description: "This is a Movie Notifier server specification. Read more about the movie notifier at https://github.com/SijmenHuizenga/Movie-Notifier"
tags:
  - name: User
    description: Everything about user management and authentication.
  - name: Watcher
    description: Everything about watchers.
  - name: Notification Type
    description: Methods of communication that can be enabled by the user to notifie the user when new movie show is available.
  - name: Operations
    description: Server status, statistics and system management.
schemes:
  - https
paths:
  /user:
    put:
      tags:
        - User
      description: Create a new user.
      parameters:
        - name: UserCreationDetails
          in: body
          description: The user data of the new user.
          required: true
          schema:
            type: object
            required:
              - name
              - email
              - phonenumber
              - password
            properties:
              name:
                title: Username
                type: string
                description: The user-friendly name of the user. The name must be between 4 and 16 charcters and can only contain letters (a-z) and numbers (0-9), but no capital letters (A-Z). The first 4 characters must always be letters.
              email:
                title: Email
                type: string
                format: email
                description: A valid email adres.
              phonenumber:
                title: Phone Number
                type: string
                description: A valid, Global Number as described in RFC 3966 section 5.1.4 (always in the format of +[countrycode][phonenumber]).
              password:
                title: Password
                type: string
                format: password
                description: The password of the user. The password must at least be 6 characters long and may only contain the letters (a-z), capital letters (A-Z), numbers (0-9) and the following special characters between (and thus except) the quotation marks "!@#$%^&*()_-+={}[]:;?><.,".
      responses:
        200:
         description: Returns the props about the created user
         schema:
           $ref: '#/definitions/User'
        400:
          $ref: '#/responses/BadRequestError'
        500:
          $ref: '#/responses/InternalServerError'
  /login:
    post:
      tags:
        - User
      description: Login a user.
      parameters:
        - name: UserLoginDetails
          in: body
          description: The login props
          required: true
          schema:
            type: object
            required:
              - name
              - password
            properties:
              name:
                title: Username
                type: string
                description: The user-friendly name of the user.
              password:
                title: Password
                type: string
                format: password
                description: The password of the user.
      responses:
        200:
         description: The login is successfull. The user props are returned.
         schema:
           $ref: '#/definitions/User'
        401:
          description: Not Authorized. The name/password combination is not correct.
        400:
          $ref: '#/responses/BadRequestError'
        500:
          $ref: '#responses/InternalServerError'
  /user/{userid}:
    get:
      tags:
        - User
      description: Get user props
      parameters:
        - $ref: '#/parameters/userid'
      responses:
        200:
         description: Returns the props about the user. Only the fields that you have permission to see are returned.
         schema:
           $ref: '#/definitions/User'
        400:
          $ref: '#/responses/BadRequestError'
        401:
          $ref: "#/responses/UnauthorizedError"
        500:
          $ref: '#/responses/InternalServerError'
      security:
        - APIKEY: []
    post:
      tags:
        - User
      description: Updates a user
      parameters:
        - $ref: '#/parameters/userid'
        - name: UserUpdateDetails
          in: body
          description: The fields that should be updated. Fields that do not require updates can be omitted.
          required: true
          schema:
            type: object
            properties:
              name:
                title: Username
                type: string
                description: The user-friendly name of the user. The name must be between 4 and 16 charcters and can only contain letters (a-z) and numbers (0-9), but no capital letters (A-Z). The first 4 characters must always be letters.
              email:
                title: Email
                type: string
                format: email
                description: A valid email adres.
              phonenumber:
                title: Phone Number
                type: string
                description: A valid, Global Number as described in RFC 3966 section 5.1.4 (always in the format of +[countrycode][phonenumber]).
              password:
                title: Password
                type: string
                format: password
                description: The password of the user. The password must at least be 6 characters long and may only contain the letters (a-z), capital letters (A-Z), numbers (0-9) and the following special characters between (and thus except) the quotation marks "!@#$%^&*()_-+={}[]:;?><.,".
              notifications:
                title: Enabled Notifications
                description: A list of enabled notificaiton types for this user.
                type: array
                items:
                  title: Notification Type Key
                  type: string
                  description: A three character string that uniquely identifies a notification type.
      responses:
        200:
         description: Returns the props about the updated user
         schema:
           $ref: '#/definitions/User'
        400:
          $ref: '#/responses/BadRequestError'
        401:
          $ref: "#/responses/UnauthorizedError"
        500:
          $ref: '#/responses/InternalServerError'
      security:
        - APIKEY: []
    delete:
      tags:
        - User
      description: Deletes a user and all corresponding data in the system.
      parameters:
        - $ref: '#/parameters/userid'
      responses:
        200:
         description: The user is succesfully deleted
        400:
          $ref: '#/responses/BadRequestError'
        401:
          $ref: "#/responses/UnauthorizedError"
        500:
          $ref: '#/responses/InternalServerError'
      security:
        - APIKEY: []

  /notificationtypes:
    get:
      tags:
        - Notification Type
      description: Get a list of all notification types
      responses:
        200:
          description: All the notification types in the system.
          schema:
            type: array
            items:
              $ref: "#/definitions/NotificationType"
        500:
          $ref: '#/responses/InternalServerError'
  /notificationtypes/{notificationtypekey}:
    get:
      tags:
        - Notification Type
      description: Get the props of a single notificaiton type
      parameters:
        - name: notificationtypekey
          in: path
          description: The key of the notification type.
          required: true
          type: string
      responses:
        200:
          description: The props of the notification identified by notificationtypekey
          schema:
            $ref: "#/definitions/NotificationType"
        400:
          $ref: '#/responses/BadRequestError'
        500:
          $ref: '#/responses/InternalServerError'

  /watchers:
    get:
      tags:
        - Watcher
      description: Get a list of all watchers that you are authorized to see.
      responses:
        200:
          description: All the watchers.
          schema:
            type: array
            items:
              $ref: '#/definitions/Watcher'
        400:
          description: Bad Request
        401:
          $ref: "#/responses/UnauthorizedError"
        500:
          description: Internal server error
      security:
        - APIKEY: []
    put:
      tags:
        - Watcher
      description: Create a new watcher
      parameters:
        - name: watcher
          in: body
          description: The new watcher data. The field `uuid` must be omitted since this field will be created by the system.
          schema:
            $ref: '#/definitions/Watcher'
          required: true
      responses:
        200:
          description: The creation is succesful. Returned is the created watcher.
          schema:
            $ref: '#/definitions/Watcher'
        400:
          description: Bad Request
          schema:
            type: string
            description: The reason for creation failure.
        401:
          $ref: "#/responses/UnauthorizedError"
        500:
          description: Internal server error
      security:
        - APIKEY: []
  /watchers/{watcherid}:
    get:
      tags:
        - Watcher
      description: Get the props of the given watcher id
      parameters:
        - $ref: '#/parameters/watcherid'
      responses:
        200:
          description: Watcher props.
          schema:
            $ref: '#/definitions/Watcher'
        400:
          description: Bad Request
        401:
          $ref: "#/responses/UnauthorizedError"
        500:
          description: Internal server error
      security:
        - APIKEY: []
    post:
      tags:
        - Watcher
      description: Update the props of the given watcher id
      parameters:
        - $ref: '#/parameters/watcherid'
        - name: watcher
          in: body
          description: The watcher data to update. The fields `uuid` and `user` should not be provided as it is not possible to update these fields.
          schema:
            $ref: '#/definitions/Watcher'
          required: true
      responses:
        200:
          description: The update is succesful. Returned is the created watcher.
          schema:
            $ref: '#/definitions/Watcher'
        400:
          description: Bad Request
          schema:
            type: string
            description: The reason for creation failure.
        401:
          $ref: "#/responses/UnauthorizedError"
        500:
          description: Internal server error
      security:
        - APIKEY: []
    delete:
      tags:
        - Watcher
      description: Delete the watcher given the watcher id
      parameters:
        - $ref: '#/parameters/watcherid'
      responses:
        200:
          description: The deletion is succesful.
        400:
          description: Bad Request
        401:
          $ref: "#/responses/UnauthorizedError"
        500:
          description: Internal server error
      security:
        - APIKEY: []
securityDefinitions:
  APIKEY:
    type: apiKey
    description: |
      A 64 character string that authenticates the request.
      This apikey is received by loggin in using the url /user/login.
    name: APIKEY
    in: header
parameters:
  userid:
    name: userid
    in: path
    description: The unique identifier of the user.
    required: true
    type: string
  watcherid:
    name: watcherid
    in: path
    description: The unique identifier of a watcher.
    required: true
    type: string
definitions:
  User:
    type: object
    description: The full representation of a user.
    required:
      - uuid
      - name
      - email
      - phonenumber
      - notifications
      - apikey
    properties:
      uuid:
        type: string
        description: A Universally Unique IDentifier.
      name:
        title: Username
        type: string
        description: The user-friendly name of the user. Is always between 4 and 16 charcters and only contains letters (a-z) and numbers (0-9), but no capital letters (A-Z). The first 4 characters are always letters.
      email:
        title: Email
        type: string
        format: email
        description: A valid email adres.
      phonenumber:
        title: Phone Number
        type: string
        description: A valid, Global Number as described in RFC 3966 section 5.1.4 (always in the format of +[countrycode][phonenumber]).
      notifications:
        title: Enabled Notifications
        description: A list of enabled notificaiton types for this user.
        type: array
        items:
          title: Notification Type Key
          type: string
          description: A three character string that uniquely identifies a notification type.
      apikey:
        description: A 64 character string that authenticates the user in api requests.
        type: string
        minLength: 64
        maxLength: 64
  NotificationType:
    type: object
    properties:
      key:
        description: A three character string that uniquely identifies a notification type.
        type: string
      name:
        description: The name of this notification type
        type: string
      description:
        description: The extended description of this notification type
        type: string
  Watcher:
    type: object
    description: The full representation of a watcher.
    required:
      - name
      - movieid
      - cinemaid
    properties:
      uuid:
        type: string
        description: The unique identifier that identifies this watcher. Format is a Universally Unique IDentifier as described in RFC 4122.
      user:
        type: string
        description: The unique identifier of the user that owns this watcher.
      name:
        type: string
        description: The displayname of this watcher.
      movieid:
        type: integer
        description: The unique identifier of the movie to watch for.
      cinemaid:
        type: string
        description: The unique identifier of the movie to watch for. If empty than every cinema is acceptable.
      startAfter:
        type: string
        format: long
        description: The earliest moment of a showing to watch for. UTC
      startBefore:
        type: string
        format: long
        description: The latest moment of a showing to watch for. UTC
      props:
        type: object
        description: These are the filter properties of this watcher. You will only get notificaitons about showings of this movie if the showing complies to all these properties. If a property is not defined or null than the property will be treated as 'no preference'.
        properties:
          ov:
            type: boolean
            description: whether or not the showing is in the original language
          nl:
            type: boolean
            description: whether or not the showing is in the dutch language
          imax:
            type: boolean
            description: whether or not the showing is in
          3d:
            type: boolean
            description: whether or not the showing is in 3D
          hfr:
            type: boolean
            description: whether or not the showing is in HFR
          4k:
            type: boolean
            description: whether or not the showing is in 4K resolution
          laser:
            type: boolean
            description: whether or not the showing is projected with a laser projector
          dbox:
            type: boolean
            description: whether or not the showing is in D-Box seats
          dolbycinema:
            type: boolean
            description: whether or not the showing uses Dolby Cinema.
          dolbyatmos:
            type: boolean
            description: whether or not the showing is in dolbey atmos
responses:
  UnauthorizedError:
    description: API key is missing or invalid
  BadRequestError:
    description: Bad Request. This reason is described in the body.
    schema:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            title: Error Message
            description: The reason for creation failure.
            type: string
  InternalServerError:
    description: Internal server error
    schema:
      type: object
      required:
        - message
      properties:
        message:
          title: Error Message
          description: The reason for server error
          type: string

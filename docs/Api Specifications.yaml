swagger: '2.0'

info:
  version: '4.0-SNAPSHOT'
  title: Movie Notifier
  description: 'This is a Movie Notifier server specification. Read more about the movie notifier at https://github.com/SijmenHuizenga/Movie-Notifier'
  contact:
    email: sijmenhuizenga@gmail.com
host: movienotifier.sijmen.it
tags:
  - name: User
    description: Everything about user management and authentication.
  - name: Watcher
    description: Everything about watchers.
  - name: Cinemas
    description: Everything about pathe
  - name: Operations
    description: Server status, statistics and system management.
schemes:
  - https
paths:
  /user:
    put:
      tags:
        - User
      description: Register a new user. This is the starting point for new users. After succesfully registering a user the userdetails including the user apikey are returned. This apikey is needed to authenticate requests.
      parameters:
        - name: UserCreationDetails
          in: body
          description: The user data of the new user. The fields id and apikey should not be specified in this request since these are generated by the system. The response has these fields.
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
         description: Returns the props about the created user
         schema:
           $ref: '#/definitions/User'
        400:
          $ref: '#/responses/BadRequestError'
        500:
          $ref: '#/responses/InternalServerError'
  /login:
    post:
      tags:
        - User
      description: Login a user.
      parameters:
        - name: UserLoginDetails
          in: body
          description: The login details
          required: true
          schema:
            type: object
            required:
              - name
              - password
            properties:
              name:
                title: Username
                type: string
                description: The user-friendly name of the user.
              password:
                title: Password
                type: string
                format: password
                description: The password of the user.
      responses:
        200:
         description: The login is successfull. The user details are returned.
         schema:
           $ref: '#/definitions/User'
        400:
          $ref: '#/responses/BadRequestError'
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/InternalServerError'
  /user/{userid}:
    get:
      tags:
        - User
      description: Get user details
      parameters:
        - $ref: '#/parameters/userid'
      responses:
        200:
         description: Returns the details about the user. Only the fields that you have permission to see are returned.
         schema:
           $ref: '#/definitions/User'
        400:
          $ref: '#/responses/BadRequestError'
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/InternalServerError'
      security:
        - APIKEY: []
    post:
      tags:
        - User
      description: Updates a user
      parameters:
        - $ref: '#/parameters/userid'
        - name: UserUpdateDetails
          in: body
          description: The fields that should be updated. Fields that should not be updated can be omitted. The fields apikey and userid cannot be specified since these cannot be updated.
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
         description: Returns the new details about the updated user
         schema:
           $ref: '#/definitions/User'
        400:
          $ref: '#/responses/BadRequestError'
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/InternalServerError'
      security:
        - APIKEY: []
    delete:
      tags:
        - User
      description: Deletes a user and all corresponding data in the system.
      parameters:
        - $ref: '#/parameters/userid'
      responses:
        200:
         description: The user is succesfully deleted
        400:
          $ref: '#/responses/BadRequestError'
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/InternalServerError'
      security:
        - APIKEY: []
  /watchers:
    get:
      tags:
        - Watcher
      description: Get a list of all watchers that you are owned by you. You own a watcher when the user in the watcher has your id.
      responses:
        200:
          description: All the watchers you own. If you own no watchers a empty array is returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/Watcher'
        400:
          $ref: '#/responses/BadRequestError'
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/InternalServerError'
      security:
        - APIKEY: []
    put:
      tags:
        - Watcher
      description: Create a new watcher. There are many business rules that validate the watcher data. These are specified in the system specifications. If the validation of one of these rules fails a BadRequest response will be returned.
      parameters:
        - name: watcher
          in: body
          description: The new watcher data. The field `id` must be omitted since this field will be created by the system. All other fields are required.
          schema:
            $ref: '#/definitions/Watcher'
          required: true
      responses:
        200:
          description: The creation is succesful. Returned is the created watcher.
          schema:
            $ref: '#/definitions/Watcher'
        400:
          $ref: '#/responses/BadRequestError'
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/InternalServerError'
      security:
        - APIKEY: []
  /watchers/{watcherid}:
    get:
      tags:
        - Watcher
      description: Get the details of a watcher by its id. If you are not the owner of the requeted watcher you might not get all details. This is further specified in the system specifications.
      parameters:
        - $ref: '#/parameters/watcherid'
      responses:
        200:
          description: Watcher details.
          schema:
            $ref: '#/definitions/Watcher'
        400:
          $ref: '#/responses/BadRequestError'
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/InternalServerError'
    post:
      tags:
        - Watcher
      description: Update the details of a watcher by its id. There are many business rules that apply to watcher data. These are specified in the system specifications. If the validation of one of these rules fails a BadRequest response will be returned. Only the owner of the watcher can update it.
      parameters:
        - $ref: '#/parameters/watcherid'
        - name: watcher
          in: body
          description: The watcher data to update. The field `id` does not need to be specified since this is redundant with the url parameter.
          schema:
            $ref: '#/definitions/Watcher'
          required: true
      responses:
        200:
          description: The update is succesful. Returned is the created watcher.
          schema:
            $ref: '#/definitions/Watcher'
        400:
          $ref: '#/responses/BadRequestError'
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/InternalServerError'
      security:
        - APIKEY: []
    delete:
      tags:
        - Watcher
      description: Delete the watcher given the watcher id. Only the owner of the watcher can delete it.
      parameters:
        - $ref: '#/parameters/watcherid'
      responses:
        200:
          description: The deletion is succesful.
        400:
          $ref: '#/responses/BadRequestError'
        401:
          $ref: '#/responses/UnauthorizedError'
        500:
          $ref: '#/responses/InternalServerError'
      security:
        - APIKEY: []
  /cinemas:
    get:
      tags:
        - Cinemas
      description: Get all pathe and it's details that are supported by the system.
      responses:
        200:
          description: List of all pathe.
          schema:
            type: array
            items:
              $ref: '#/definitions/Cinema'
        500:
          $ref: '#/responses/InternalServerError'
  /notification-test:
    post:
      tags:
        - Operations
      description: Make the api send a test-notification. The notification will be sent to all firebase cloud messaging devices. When the email adres is configured it will also be sent to the email address.
      parameters:
        - name: testdata
          in: body
          description: The example data to send to use for the notification
          required: true
          schema:
            type: object
            required:
              - body
              - watcher-id
              - watcher-name
              - match-count
              - movie-id
            properties:
              body:
                type: string
                description: The notification body.
              watcher-id:
                type: string
                description: The id of the watcher that this notification triggered. The value will be directly forwarded without any checking.
              watcher-name:
                type: string
                description: The name of the watcher. The value will be directly forwarded without any checking.
              match-count:
                type: integer
                description: The amount of matches that this watcher has.
              movie-id:
                type: integer
                description: The movie identifier that this notification is about.
      responses:
        200:
          description: The notification has been succesfully sent.
        500:
          $ref: '#/responses/InternalServerError'
      security:
        - APIKEY: []
  /health:
    get:
      tags:
        - Operations
      description: Get the current application health
      responses:
        200:
          description: The application health as provided by Spring Framework and described here http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-health-access-restrictions
  /mappings:
    get:
      tags:
        - Operations
      description: Get the current application mappings
      responses:
        200:
          description: The application mappings as provided by Spring Framework. No documentation provided
  /info:
    get:
      tags:
        - Operations
      description: Get server application information. For example applicaiton git version and build details.
      responses:
        200:
          description: The application information. De details may change without notice.
  /metrics:
    get:
      tags:
        - Operations
      description: Get server application metrics.
      responses:
        200:
          description: The application metrics. De details may change without notice.
securityDefinitions:
  APIKEY:
    type: apiKey
    description: |
      A 64 character string that authenticates the request.
      This apikey is received by loggin in using the url /user/login.
    name: APIKEY
    in: header
parameters:
  userid:
    name: userid
    in: path
    description: The unique identifier of the user.
    required: true
    type: string
  watcherid:
    name: watcherid
    in: path
    description: The unique identifier of a watcher.
    required: true
    type: string
definitions:
  User:
    type: object
    description: The full representation of a user.
    required:
      - id
      - name
      - apikey
    properties:
      id:
        type: string
        description: A identifier that identifies this user
      name:
        title: Username
        type: string
        description: The username must be between 4 and 16 charcters and only contains letters (a-z) and numbers (0-9), but no capital letters (A-Z). The first 4 characters must always be letters.
      password:
        title: Password
        type: string
        minLength: 8
        description: The password of the user. The password must at least be 8 characters long and may only contain the letters (a-z), capital letters (A-Z), numbers (0-9) and the following special characters between (and thus except) the quotation marks "!@#$%^&*()_-+={}[]:;?><.,". When creating this field is required. When updating it is optional. This field will never be returned when requesting user details.
      email:
        title: Email
        type: string
        format: email
        description: A valid email adres. Optional. When not specified no notifications wil be sent to email.
      fcm-registration-tokens:
        title: Firebase Cloud Messaging registration token
        description: A list of tokens referencing Firebase Cloud Messaging client devices. All clients will receive all notifications.
        type: array
        items:
          type: string
          description: The Firebase Cloud Messaging registration token.
      apikey:
        description: A 64 character string that authenticates the user in api requests.
        type: string
        minLength: 64
        maxLength: 64
  Watcher:
    type: object
    description: The full representation of a watcher. A watcher represents an eye that is looking for new movie showings. When a new showing is available and complies to this watcher, than the watcher will notify the user of this new movie showing.
    required:
      - id
      - userid
      - name
      - movieid
      - cinemaid
      - begin
      - end
      - filters
    properties:
      id:
        type: string
        description: The unique identifier that identifies this watcher.
        example: "599416e108813b00012de818"
      userid:
        type: string
        description: The unique identifier of the user that owns this watcher. This is also the user that is notified when a new showing that complies to all filters is available.
        example: "5995f25708813b0001f99393"
      name:
        type: string
        minLength: 3
        maxLength: 50
        description: The displayname of this watcher. Length of the name must be between 3 and 50 characters.
        example: "IT Premiere watcher"
      movieid:
        type: integer
        description: The unique identifier of the movie to watch for.
        example: 123456
      cinemaid:
        type: integer
        description: The unique identifier of the movie to watch for. Get a list of all supported pathe by using the `/pathe` endpoint.
        example: 12
      begin:
        title: Start watching from
        description: The timestamp this watcher should be activated
        type: number
        format: timestamp
        example: 1507392000000
        minimum: 0
      end:
        title: Stop watching at
        description: The timestamp this watcher should be stopped
        type: number
        format: timestamp
        example: 1507392000000
        minimum: 0
      filters:
        type: object
        description: These are the filter properties of this watcher. You will only get notificaitons about showings of this movie if the showing complies to all these properties.
        required:
          - startafter
          - startbefore
          - ov
          - nl
          - imax
          - 3d
          - hfr
          - 4k
          - laser
          - dbox
          - 4dx
          - dolbycinema
          - dolbyatmos
        properties:
          startafter:
            title: Showing must start after this timestamp
            type: number
            format: timestamp
            example: 1504800000000
            minimum: 0
            description: The user is only notified about showings that start later than this timestamp.
          startbefore:
            title: Showing must start before timestamp
            type: number
            format: timestamp
            example: 1507392000000
            minimum: 0
            description: The user is only notified about showings that start before this timestamp.
          ov:
            title: Original Version Audio
            type: string
            enum: [yes, no, no-preference]
            description: whether or not the showing is in the original language
          nl:
            title: Dutch Spoken Audio
            type: string
            enum: [yes, no, no-preference]
            description: whether or not the showing is in the dutch language
          imax:
            title: IMAX Display
            type: string
            enum: [yes, no, no-preference]
            description: whether or not the showing is in
          3d:
            title: 3D Showing
            type: string
            enum: [yes, no, no-preference]
            description: whether or not the showing is in 3D
          hfr:
            type: string
            enum: [yes, no, no-preference]
            description: whether or not the showing is in HFR
          4k:
            type: string
            enum: [yes, no, no-preference]
            description: whether or not the showing is in 4K resolution
          laser:
            type: string
            enum: [yes, no, no-preference]
            description: whether or not the showing is projected with a laser projector
          dbox:
            type: string
            enum: [yes, no, no-preference]
            description: whether or not the showing is in D-Box seats
          4dx:
            type: string
            enum: [yes, no, no-preference]
            description: whether or not the showing is in 4DX seats
          dolbycinema:
            type: string
            enum: [yes, no, no-preference]
            description: whether or not the showing uses Dolby Cinema.
          dolbyatmos:
            type: string
            enum: [yes, no, no-preference]
            description: whether or not the showing is in dolbey atmos
  Cinema:
    type: object
    properties:
      id:
        description: The unique id of this cinema
        type: integer
        example: 9
      name:
        description: The name of this cinema. Use this field for displaying to the user.
        type: string
        example: Pathé Arena
      lat:
        description: The lattitude location of this cinema
        type: number
        example: 52.31233
      lon:
        description: The longtitude location this cinema
        type: number
        example: 4.94577
responses:
  UnauthorizedError:
    description: This error is thrown when the authentication fails or when the authorized user does not have permission to execute the command. A common cause of this exception is a missing or invalid apikey. An example; When you request the details of a user with the apikey of onther user using GET /user/userid, you will always get this exception regardless of the user exists in the system.
    schema:
      type: object
      required:
        - message
      properties:
        message:
          title: Error message
          description: Some details about the cause of this error.
  BadRequestError:
    description: Bad Request. Something in the reuqest is wrong. Examples are missing fields, wrong field values, business rule violation. It is possible that there are multiple faults in a request. All faults in a request are described as seperate items in the returned body of this error.
    schema:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            title: Error Message
            description: The reason for creation failure.
            type: string
  InternalServerError:
    description: Internal server error
    schema:
      type: object
      required:
        - message
      properties:
        message:
          title: Error Message
          description: The reason for server error
          type: string